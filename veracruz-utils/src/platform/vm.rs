//! Shared material for all VM-like isolation mechanisms
//!
//! Material that is common to AWS Nitro Enclaves and Linux applications,
//! and similar backends.
//!
//! ## Authors
//!
//! The Veracruz Development Team.
//!
//! ## Licensing and copyright notice
//!
//! See the `LICENSE.markdown` file in the Veracruz root directory for
//! information on licensing and copyright.

use serde::{Deserialize, Serialize};

///////////////////////////////////////////////////////////////////////////////
// Status messages.
///////////////////////////////////////////////////////////////////////////////

/// The Status value returned by the enclave/application for operations.
/// This is intended to be received as a bincode serialized
/// `RootEnclaveMessage::Status`
#[derive(Serialize, Deserialize, Debug)]
pub enum VMStatus {
    /// The operation generating the message succeeded
    Success,
    /// The operation generating the message failed
    Fail,
    /// The requested operation is not yet implemented
    Unimplemented,
}

///////////////////////////////////////////////////////////////////////////////
// Command-and-control messages for the runtime manager.
///////////////////////////////////////////////////////////////////////////////

/// An enumerated type describing messages passed between to/from the Runtime
/// Manager enclave (These originate from the Untrusted Pass-through (Veracruz
/// server)
/// These messages are inteded to be serialized using bincode before transport,
/// and deserialized using bincode after transport
#[derive(Serialize, Deserialize, Debug)]
pub enum RuntimeManagerMessage {
    /// A message generated by an operation that did not return data, but did
    /// return a status.  Most operations return data, but if they fail, they
    /// will return a status set to `VMStatus::Fail` (or
    /// `VMStatus::Unimplemented` if it is not implmeneted).  Parameters in
    /// order are:
    /// - The status.
    Status(VMStatus),
    /// A request to initialize the Runtime Manager enclave with the provided
    /// policy.  Parameters (in order):
    ///
    /// - The JSON policy in String format,
    /// - The bytes of the challenge,
    /// - The challenge ID.
    Initialize(String, Vec<u8>, i32),
    #[cfg(feature = "linux")]
    /// A request to set the server certificate chain.  Note that this is done
    /// slightly differently for Linux when compared to Nitro, as most of the
    /// dummy Linux attestation is actually done in the Linux Root Enclave
    /// where e.g. the Linux runtime manager can be measured, without the use of
    /// a hacky message needed to set the hash.  As a result, the certificate
    /// chain is computed in the Linux Root Enclave, before being forwarded to
    /// the Runtime Manager enclave later, via this message.  Parameters (in
    /// order) are:
    /// - The certificate chain.
    SetCertificateChain(Vec<Vec<u8>>),
    #[cfg(feature = "linux")]
    /// A request to forward a certificate signing request (CSR).
    GetCSR,
    #[cfg(feature = "linux")]
    /// The response to the `GetCSR` message, returning the byte encoding of a
    /// generated certificate signing request.  Parameters in order are:
    /// - The byte encoding of the certificate signing request.
    GeneratedCSR(Vec<u8>),
    /// A request to establish a new TLS session with the enclave.
    NewTLSSession,
    /// The response to the `NewTLSSession` message.  Parameters in order are:
    /// - The Session ID of the created TLS session.
    TLSSession(u32),
    /// A request to close an already established TLS session.  Parameters in
    /// order are:
    /// - The Session ID of the session to be closed.
    CloseTLSSession(u32),
    /// Request to determine if the TLS Session needs data to be sent to it.
    /// Parameters in order are:
    /// - The Session ID of the TLS session.
    GetTLSDataNeeded(u32),
    /// Request to send TLS data to the enclave.  Parameters in order are:
    /// - The Session ID of the TLS Session associated with the data,
    /// - The TLS data.
    SendTLSData(u32, Vec<u8>),
    /// Response to `GetTLSDataNeeded` message.  Parameters in order are:
    /// - Is data needed?
    TLSDataNeeded(bool),
    /// Request TLS data from the enclave.  Parameters in order are:
    /// - The Session ID of the TLS session to request data from.
    GetTLSData(u32),
    /// Response to `GetTLSData`.  Parameters in order are:
    /// - The TLS data, which may be empty.
    /// - A flag indicating if the TLS session is still alive.
    TLSData(Vec<u8>, bool),
    /// A request to reset the enclave.
    ResetEnclave,
}
